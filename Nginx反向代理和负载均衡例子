1 反向代理概念
   正向和反向代理都是client和server中间加了一个代理层。
   正向代理中，proxy和client同属一个LAN，对server透明；
   反向代理中，proxy和server同属一个LAN，对client透明。
   实际上proxy在两种代理中做的事都是代为收发请求和响应，不过从结构上来看正好左右互换了下，所以把后出现的那种代理方式叫成了反向代理。
   
  (1).正向代理的概念
       正向代理，也就是传说中的代理,他的工作原理就像一个跳板，简单的说，我是一个用户，我访问不了某网站，但是我能访问一个代理服务器，
         这个代理服务器呢，他能访问那个我不能访问的网站，于是我先连上代理服务器，告诉他我需要那个无法访问网站的内容，代理服务器去取回来，
         然后返回给我。从网站的角度，只在代理服务器来取内容的时候有一次记录，有时候并不知道是用户的请求，也隐藏了用户的资料，
         这取决于代理告不告诉网站。
       结论就是，正向代理 是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，
          客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。
          客户端必须要进行一些特别的设置才能使用正向代理。
(2).反向代理的概念
继续举例:    
       例用户访问 http://www.test.com/readme，但www.test.com上并不存在readme页面，他是偷偷从另外一台服务器上取回来，
         然后作为自己的内容返回用户，但用户并不知情。这里所提到的 www.test.com 这个域名对应的服务器就设置了反向代理功能。
       结论就是，反向代理正好相反，对于客户端而言它就像是原始服务器，并且客户端不需要进行任何特别的设置。
       客户端向反向代理的命名空间(name-space)中的内容发送普通请求，接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端，就像这些内容原本就是它自己的一样。
(3).两者区别
从用途上来讲：
       正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。正向代理还可以使用缓冲特性减少网络使用率。反向代理的典型用途是将防火墙后面的服务器提供给Internet用户访问。反向代理还可以为后端的多台服务器提供负载平衡，或为后端较慢的服务器提供缓冲服务。另外，反向代理还可以启用高级URL策略和管理技术，从而使处于不同web服务器系统的web页面同时存在于同一个URL空间下。
从安全性来讲：
       正向代理允许客户端通过它访问任意网站并且隐藏客户端自身，因此你必须采取安全措施以确保仅为经过授权的客户端提供服务。反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。


2 nginx反向代理配置例子
  在nginx.conf中的locationzen proxy_pass中增加服务端的服务端相关信息
  指令说明：proxy_pass
   语法：proxy_pass URL
默认值：no       
 使用字段：location, location中的if字段       
  这个指令设置被代理服务器的地址和被映射的URI，地址可以使用主机名或IP加端口号的形式，例如：proxy_pass http://localhost:8000/uri/;

       server {
        listen       7888 default_server;
        listen       [::]:7888 default_server;
        server_name  _;
        root         /usr/share/nginx/html;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;


        location / {
           root   /apps/oaapp;
            index  index.jsp index.html index.htm;

            proxy_pass        http://186.100.8.118:8001;
            proxy_redirect off;
            # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
            proxy_set_header  Host  $host;
            proxy_set_header  X-Real-IP  $remote_addr;
            proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        }
修改完配置文件可以使用nginx -t测试配置文件格式是否正确

3 配置负载均衡 
  使用upstream配置负载均衡
  配置示例
  upstream backend { //# 负载均衡站点的名称为backend，可以自己取
        server   186.100.8.118:8001 max_fails=2 fail_timeout=30s weight=5; // # web服务器的IP地址及最大尝试次数和失败时间，以及权杖
        server   186.100.8.118:8000 max_fails=2 fail_timeout=30s weight=1;
    }
     NGINX负载的几种方式
nginx 的 upstream目前支持4 种方式的分配

轮询（默认）
每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。
weight
指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。
ip_hash
每个请求按访问ip的hash结果分配，这样每个ip固定访问一个后端服务器.
fair（第三方）
按后端服务器的响应时间来分配请求，响应时间短的优先分配。
url_hash（第三方）
每个请求按访问url的hash结果分配，这样每个url固定指向一个后端服务器.

测试 
 现在使用python wsgi在8000 和8001端口上启动两个服务，代码示例如下
 //在8000端口上启动一个server服务 curl http://186.100.8.118:8000 会返回hello world!8000
 from wsgiref.simple_server import make_server

class AppClass:

    def __call__(self,environ, start_response):
        status = '200 OK'
        response_headers = [('Content-type', 'text/plain')]
        start_response(status, response_headers)
        return ["hello world!8000"]

app = AppClass()
httpd = make_server('', 8000, app)
print "Serving on port 8000..."
httpd.serve_forever()

ngnix默认启动在80端口，将配置文件修改完成后，service nginx restart重启nginx服务之后，
curl http://localhost:80 可以看到ngix将请求发送给8000或者8001端口
随机输出 hello world!8000
         hello world!8001
         




